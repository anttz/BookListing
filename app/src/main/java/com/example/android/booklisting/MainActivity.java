package com.example.android.booklisting;

import android.app.LoaderManager;
import android.content.Context;
import android.content.Intent;
import android.content.Loader;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<List<Book>> {

    private static final String GOOGLE_BOOKS_URL_1 = "https://www.googleapis.com/books/v1/volumes?q=";
    private static final String GOOGLE_BOOKS_URL_2 = "&intitle";
    private static final int BOOK_LOADER_ID = 1;
    private LoaderManager mLoaderManager;
    private BookAdapter mAdapter;
    private TextView mEmptyTextView;
    private ProgressBar mLoadingProgressBar;
    private EditText mEditText;
    private String mUrlText;
    private boolean mHasLoaded = false;

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ListView bookListView = (ListView) findViewById(R.id.list);
        mAdapter = new BookAdapter(this, R.id.activity_main, new ArrayList<Book>());
        bookListView.setAdapter(mAdapter);
        bookListView.setEmptyView(mEmptyTextView);
        mLoadingProgressBar = (ProgressBar) findViewById(R.id.loading_progress_bar);
        mLoadingProgressBar.setVisibility(View.INVISIBLE);
        mEmptyTextView = (TextView) findViewById(R.id.empty_textview);
        mEmptyTextView.setText(R.string.instructions_text);
        mEditText = (EditText) findViewById(R.id.keyword_editext);
        mLoaderManager = getLoaderManager();
        mUrlText = mEditText.getText().toString();
        mLoaderManager.initLoader(BOOK_LOADER_ID, null, this);
        Button searchButton = (Button) findViewById(R.id.searchBook__button);
        searchButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ConnectivityManager connectivityManager = (ConnectivityManager) MainActivity.this.getSystemService(Context.CONNECTIVITY_SERVICE);
                NetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();
                boolean isConnected = activeNetwork != null && activeNetwork.isConnectedOrConnecting();
                if (isConnected) {
                    mUrlText = mEditText.getText().toString();
                    if (mHasLoaded == false) {
                        if (savedInstanceState == null) {
                            mLoaderManager.initLoader(BOOK_LOADER_ID, null, MainActivity.this);
                        } else {
                            mLoaderManager.restartLoader(BOOK_LOADER_ID, null, MainActivity.this);
                        }
                    } else {
                        mLoaderManager.restartLoader(BOOK_LOADER_ID, null, MainActivity.this);
                    }
                } else {
                    mLoadingProgressBar.setVisibility(View.GONE);
                    mAdapter.clear();
                    mEmptyTextView.setVisibility(View.VISIBLE);
                    mEmptyTextView.setText(R.string.no_internet_connection);
                }
            }
        });
        bookListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Book currentBook = mAdapter.getItem(position);
                Uri infoLink = Uri.parse(currentBook.getmInfoLink());
                Intent linkIntent = new Intent(Intent.ACTION_VIEW, infoLink);
                startActivity(linkIntent);
            }
        });
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<List<Book>> onCreateLoader(int id, Bundle args) {
        mLoadingProgressBar.setVisibility(View.VISIBLE);
        return new BookLoader(this, GOOGLE_BOOKS_URL_1 + mUrlText + GOOGLE_BOOKS_URL_2);
    }

    /**
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<List<Book>> loader, List<Book> data) {

        if (data != null && !data.isEmpty()) {
            mAdapter.clear();
            mAdapter.addAll(data);
            mEmptyTextView.setVisibility(View.GONE);
            mLoadingProgressBar.setVisibility(View.GONE);
            mHasLoaded = true;
        } else if (data == null) {
            mAdapter.clear();
            mEmptyTextView.setVisibility(View.VISIBLE);
            mEmptyTextView.setText(R.string.instructions_text);
            mLoadingProgressBar.setVisibility(View.GONE);
            mHasLoaded = true;
        } else {
            mLoadingProgressBar.setVisibility(View.GONE);
            mEmptyTextView.setVisibility(View.VISIBLE);
            mEmptyTextView.setText(R.string.no_books_found);
            mAdapter.clear();
            mHasLoaded = true;
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<List<Book>> loader) {
        mAdapter.clear();
    }
}
